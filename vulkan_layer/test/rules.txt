image{} -> log(Lorem ipsum)
image{} -> seq(log(Lorem ipsum), log(123))
image{} -> seq()
image{} -> seq(seq())
image{} -> seq(seq(), log(Lorem ipsum))
image{} -> disable()
image{mark(Lorem ipsum)} -> seq()
draw{with(image{})} -> seq()
draw{not(with(image{}))} -> seq()
pipeline{not(with(shader{mark(sky)}))} -> override(pDepthStencilState->depthTestEnable = VK_FALSE)
image{} -> logx(string(Lorem ipsum))
image{} -> logx(concat(string(Lorem ), string(ipsum)))
image{} -> logx(concat(string(Lorem), string( ), string(ipsum)))
pipeline{} -> logx(concat(string(Depth:), vkstruct(pDepthStencilState->depthTestEnable)))
init{} -> socket(socket, TCP, localhost, 1337, Raw)
init{} -> seq(socket(socket, TCP, localhost, 1337, LengthPrefixed), write(socket, string(Hello World)))
pipeline{} -> write(socket, concat(string(pDepthStencilState->depthTestEnable:), vkstruct(pDepthStencilState->depthTestEnable), string(\n)))
image{} -> seq(store(test), overload(test, File, test.png))
image{} -> seq(store(test), overload(test, FileFromData, string(test.png)))
receive{} -> log(Test)
receive{} -> write(socket, received())
receive{} -> write(socket, convert(raw, string, received()))
receive{} -> write(socket, strclean(convert(raw, string, received())))
image{compare(string(123), ==, string(123))} -> seq()
image{} -> seq(store(test), preload(test, string(test.png)))
receive{} -> overload(target, FileFromData, strclean(convert(raw, string, received())))
device_create{} -> seq()
device_destroy{} -> seq()
draw{with(image{})} -> on(EndRenderPass, seq())
