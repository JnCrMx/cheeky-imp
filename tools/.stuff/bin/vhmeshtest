#!/bin/bash

if [ ! -f vhmesh.txt ]; then
	echo "No vhmesh.txt file!"
	exit 2
fi

if [ $# -ne 1 ]; then
    echo "Syntax: vhmeshinstall <file>"
    exit 2
fi

file=$1
if [ ! -f "$file" ]; then
	echo "File $file not found!"
	exit 2
fi

echo "Exporting parts from Blender file $file ..."
blender -b $file --python $VH_LIB/blender_export_mesh2.py #>/dev/null 2>/dev/null

name=${file%.*}

test_dir=test
mkdir -p $test_dir


while read line; do
	index=$(echo $line | cut -f6 -d" ")
	rm $test_dir/$index.buf

	additional=( $(echo $line | cut -f7- -d" ") )
	for i in ${!additional[*]}
	do
		if ! ((i % 2)); then
			rm $test_dir/${additional[$i]}.buf
		fi
	done
done <vhmesh.txt

while read line; do
	part=$(echo $line | cut -f1 -d" ")
	descriptor=$(echo $line | cut -f2 -d" ")
	
	indexCount=$(echo $line | cut -f3 -d" ")
	firstIndex=$(echo $line | cut -f4 -d" ")
	vertexOffset=$(echo $line | cut -f5 -d" ")
	
	index=$(echo $line | cut -f6 -d" ")
	
	additional=( $(echo $line | cut -f7- -d" ") )
	additional2=[]
	for i in ${!additional[*]}
	do
		if ! ((i % 2)); then
			additional2[$(($i / 2 * 3 + 0))]=$VH_LAYER_DUMP/buffers/${additional[$i]}.buf
			additional2[$(($i / 2 * 3 + 1))]=$test_dir/${additional[$i]}.buf
		else
			additional2[$(($i / 2 * 3 + 2))]=${additional[$i]}
		fi
	done
	
	echo "Packing mesh for part $part from ${name}_$part.obj ..."
	#echo $VH_BIN/mesh_buffer_tools/patch $VH_LIB/descriptors/$descriptor.txt ${name}_$part.obj $indexCount $firstIndex $vertexOffset $VH_LAYER_DUMP/buffers/$index.buf $test_dir/$index.buf ${additional2[*]}
	$VH_BIN/mesh_buffer_tools/patch $VH_ROOT/descriptors/$descriptor.txt ${name}_$part.obj $indexCount $firstIndex $vertexOffset $VH_LAYER_DUMP/buffers/$index.buf $test_dir/$index.buf ${additional2[*]}
done <vhmesh.txt

while read line; do
	part=$(echo $line | cut -f1 -d" ")
	descriptor=$(echo $line | cut -f2 -d" ")
	
	indexCount=$(echo $line | cut -f3 -d" ")
	firstIndex=$(echo $line | cut -f4 -d" ")
	vertexOffset=$(echo $line | cut -f5 -d" ")
	
	index=$(echo $line | cut -f6 -d" ")
	
	additional=( $(echo $line | cut -f7- -d" ") )
	for i in ${!additional[*]}
	do
		if ! ((i % 2)); then
			additional[$i]=$test_dir/${additional[$i]}.buf
		fi
	done
	
	echo "Unpacking mesh for part $part to $test_dir/${name}_$part.obj ..."
	$VH_BIN/mesh_buffer_tools/extract $VH_ROOT/descriptors/$descriptor.txt $test_dir/${name}_$part.obj $indexCount $firstIndex $vertexOffset $test_dir/$index.buf ${additional[*]}
	
	if [ "$name" != "base" ]; then
		ln $test_dir/${name}_$part.obj $test_dir/base_$part.obj
		ln $test_dir/${name}_$part.obj.json $test_dir/base_$part.obj.json
	fi
done <vhmesh.txt

echo "Importing parts into Blender file $test_dir/$name.blend ..."
ln vhmesh.txt $test_dir/vhmesh.txt
if [ ! -f "$test_dir/texture" ]; then
	ln texture $test_dir/texture
fi

cd $test_dir
blender -b --python $VH_LIB/blender_import_mesh2.py #>/dev/null 2>/dev/null
cd ..

rm $test_dir/vhmesh.txt
if [ "$name" != "base" ]; then
	mv $test_dir/base.blend $test_dir/$name.blend
fi

while read line; do
	part=$(echo $line | cut -f1 -d" ")
	index=$(echo $line | cut -f2 -d" ")
	vertex=$(echo $line | cut -f3 -d" ")
	texCoord=$(echo $line | cut -f5 -d" ")
	
	rm $test_dir/$index.buf 2>/dev/null
	rm $test_dir/$vertex.buf 2>/dev/null
	rm $test_dir/$texCoord.buf 2>/dev/null
	
	if [ "$name" != "base" ]; then
		rm $test_dir/base_$part.obj
		rm $test_dir/base_$part.obj.json
	fi
done <vhmesh.txt
